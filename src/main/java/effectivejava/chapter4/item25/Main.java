package effectivejava.chapter4.item25;

/**
 * 
 * Item 25: Limit source files to a single top-level class
 * 
 * While the Java compiler lets you define multiple top-level classes in a
 * single source file, there are no benefits associated with doing so, and there
 * are significant risks. The risks stem from the fact that defining multiple
 * top-level classes in a source file makes it possible to provide multiple
 * definitions for a class. Which definition gets used is affected by the order
 * in which the source files are passed to the compiler.
 * 
 * If you compile the program with the command javac Main.java or javac
 * Main.java Utensil.java, it will behave as it did before you wrote the
 * Dessert.java file, printing pancake. But if you compile the program with the
 * command javac Dessert.java Main.java, it will print potpie. The behavior of
 * the program is thus affected by the order in which the source files are
 * passed to the compiler, which is clearly unacceptable
 * 
 * Never put multiple top-level classes or interfaces in a single source file.
 * Following this rule guarantees that you can’t have multiple definitions for a
 * single class at compile time. This in turn guarantees that the class files
 * generated by compilation, and the behavior of the resulting program, are
 * independent of the order in which the source files are passed to the
 * compiler.
 *
 */
//  (Page 115)
public class Main {
	public static void main(String[] args) {
		System.out.println(Utensil.NAME + Dessert.NAME);
	}
}