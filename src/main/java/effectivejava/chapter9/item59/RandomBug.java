package effectivejava.chapter9.item59;

import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

/**
 * 
 * Item 59: Know and use the libraries.
 * 
 * Suppose you want to generate random integers between zero and some upper
 * bound. Faced with this common task, many programmers would write a little
 * method that looks something like this:
 * 
 * This method may look good, but it has three flaws. The first is that if n is
 * a small power of two, the sequence of random numbers will repeat itself after
 * a fairly short period. The second flaw is that if n is not a power of two,
 * some numbers will, on average, be returned more frequently than others. If n
 * is large, this effect can be quite pronounced. This is powerfully
 * demonstrated by the following program, which generates a million random
 * numbers in a carefully chosen range and then prints out how many of the
 * numbers fell in the lower half of the range:
 * 
 * If the random method worked properly, the program would print a number close
 * to half a million, but if you run it, you’ll find that it prints a number
 * close to 666,666. Two-thirds of the numbers generated by the random method
 * fall in the lower half of its range!
 * 
 * The third flaw in the random method is that it can, on rare occasions, fail
 * catastrophically, returning a number outside the specified range. This is so
 * because the method attempts to map the value returned by rnd.nextInt() to a
 * non-negative int by calling Math.abs. If nextInt() returns Integer.MIN_VALUE,
 * Math.abs will also return Integer.MIN_VALUE, and the remainder operator (%)
 * will return a negative number, assuming n is not a power of two. This will
 * almost certainly cause your program to fail, and the failure may be difficult
 * to reproduce.
 * 
 * To write a version of the random method that corrects these flaws, you’d have
 * to know a fair amount about pseudorandom number generators, number theory,
 * and two’s complement arithmetic. Luckily, you don’t have to do this—it’s been
 * done for you. It’s called Random.nextInt(int). You needn’t concern yourself
 * with the details of how it does its job (although you can study the
 * documentation or the source code if you’re curious). A senior engineer with a
 * background in algorithms spent a good deal of time designing, implementing,
 * and testing this method and then showed it to several experts in the field to
 * make sure it was right. Then the library was beta tested, released, and used
 * extensively by millions of programmers for almost two decades. No flaws have
 * yet been found in the method, but if a flaw were to be discovered, it would
 * be fixed in the next release. By using a standard library, you take advantage
 * of the knowledge of the experts who wrote it and the experience of those who
 * used it before you.
 * 
 * As of Java 7, you should no longer use Random. For most uses, the random
 * number generator of choice is now ThreadLocalRandom. It produces higher
 * quality random numbers, and it’s very fast. On my machine, it is 3.6 times
 * faster than Random. For fork join pools and parallel streams, use
 * SplittableRandom.
 * 
 * A second advantage of using the libraries is that you don’t have to waste
 * your time writing ad hoc solutions to problems that are only marginally
 * related to your work. If you are like most programmers, you’d rather spend
 * your time working on your application than on the underlying plumbing.
 * 
 * A third advantage of using standard libraries is that their performance tends
 * to improve over time, with no effort on your part.
 * 
 * A fourth advantage of using libraries is that they tend to gain functionality
 * over time. If a library is missing something, the developer community will
 * make it known, and the missing functionality may get added in a subsequent
 * release.
 * 
 * A final advantage of using the standard libraries is that you place your code
 * in the mainstream. Such code is more easily readable, maintainable, and
 * reusable by the multitude of developers.
 * 
 * To summarize, don’t reinvent the wheel. If you need to do something that
 * seems like it should be reasonably common, there may already be a facility in
 * the libraries that does what you want. If there is, use it; if you don’t
 * know, check. Generally speaking, library code is likely to be better than
 * code that you’d write yourself and is likely to improve over time. This is no
 * reflection on your abilities as a programmer. Economies of scale dictate that
 * library code receives far more attention than most developers could afford to
 * devote to the same functionality.
 *
 */
// Random number generation is hard! - Page 215
public class RandomBug {
	// Common but deeply flawed!
	static Random rnd = new Random();

	static int random(int n) {
		return Math.abs(rnd.nextInt()) % n;
	}

	static int randomPreferred(int n) {
		return Math.abs(rnd.nextInt(n)) % n;
	}

	static int threadRandomPreferred(int n) {
		return Math.abs(ThreadLocalRandom.current().nextInt(n)) % n;
	}

	public static void main(String[] args) {
		int n = 2 * (Integer.MAX_VALUE / 3);
		int low = 0;
		for (int i = 0; i < 1000000; i++)
			if (random(n) < n / 2)
				low++;
		System.out.println(low);
	}
}
